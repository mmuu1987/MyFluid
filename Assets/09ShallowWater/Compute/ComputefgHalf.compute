// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
struct UStruct
{
    float U1, U2, U3;
};
struct FGStruct
{
    float F1, F2, F3, G1, G2, G3;
};
struct fgHalfStruct
{
    float f1, f2, f3, g1, g2, g3;
};
RWStructuredBuffer<UStruct> U;
RWStructuredBuffer<FGStruct> FG;
RWStructuredBuffer<fgHalfStruct> fgHalf;
int nmax;
float dx_dt;

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int columX = id.x % (nmax + 1);
    int rowY = id.x / (nmax + 1);
    int realidx = rowY * nmax + columX;
    if (columX == 0)
    {
        fgHalf[id.x].f1 = FG[realidx].F1;
        fgHalf[id.x].f2 = FG[realidx].F2;
        fgHalf[id.x].f3 = FG[realidx].F3;
    }
    else if (columX == nmax)
    {
        fgHalf[id.x].f1 = FG[realidx - 1].F1;
        fgHalf[id.x].f2 = FG[realidx - 1].F2;
        fgHalf[id.x].f3 = FG[realidx - 1].F3;
    }
    else
    {
        fgHalf[id.x].f1 = 0.5 * (FG[realidx - 1].F1 + FG[realidx].F1) - dx_dt * 0.25 * 0.8 * (U[realidx].U1 - U[realidx - 1].U1);
        fgHalf[id.x].f2 = 0.5 * (FG[realidx - 1].F2 + FG[realidx].F2) - dx_dt * 0.25 * 0.8 * (U[realidx].U2 - U[realidx - 1].U2);
        fgHalf[id.x].f3 = 0.5 * (FG[realidx - 1].F3 + FG[realidx].F3) - dx_dt * 0.25 * 0.8 * (U[realidx].U3 - U[realidx - 1].U3);
    }
    columX = id.x % nmax;
    rowY = id.x / nmax;
    realidx = rowY * nmax + columX;
    if (rowY == 0)
    {
        fgHalf[id.x].g1 = FG[realidx].G1;
        fgHalf[id.x].g2 = FG[realidx].G2;
        fgHalf[id.x].g3 = FG[realidx].G3;
    }
    else if (rowY == nmax)
    {
        fgHalf[id.x].g1 = FG[realidx - nmax].G1;
        fgHalf[id.x].g2 = FG[realidx - nmax].G2;
        fgHalf[id.x].g3 = FG[realidx - nmax].G3;
    }
    else
    {
        fgHalf[id.x].g1 = 0.5 * (FG[realidx - nmax].G1 + FG[realidx].G1) - dx_dt * 0.25 * 0.8 * (U[realidx].U1 - U[realidx - nmax].U1);
        fgHalf[id.x].g2 = 0.5 * (FG[realidx - nmax].G2 + FG[realidx].G2) - dx_dt * 0.25 * 0.8 * (U[realidx].U2 - U[realidx - nmax].U2);
        fgHalf[id.x].g3 = 0.5 * (FG[realidx - nmax].G3 + FG[realidx].G3) - dx_dt * 0.25 * 0.8 * (U[realidx].U3 - U[realidx - nmax].U3);
    }
}
